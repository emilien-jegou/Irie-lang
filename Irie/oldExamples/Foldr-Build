-- an important optimization for multidimensional arrays is removal of intermediate structures
-- zip fusion is impossible with rank-1 arrays, but what about rank-n ?

-- define
build g = g (:) []
-- eg. map
map f xs = build (\c n -> foldr (c << f) n xs)

-- Fundamental theorem:
foldr k z (build g) = g k z

-- consider the following:
sum xs = foldr (+) 0 xs
down m = build (\c n -> let loop x = if x==0 then n else c x (loop (x-1))) in loop m
-- now
sum (map sqr (down z))
= foldr (+) 0 $ build (\c n -> foldr (c . sqr) n (down z))
= foldr ((+) . sqr) 0 (down z)
= let loop x = if x==0 then 0 else sqr x + loop (x-1) in loop z

-- Unfortunately zip presents a significant complication:
zip : [a] -> [b] -> [a&b]
zip xs ys = buildN (\c n ->

build c n

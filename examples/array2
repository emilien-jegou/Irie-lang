data Tensor (shape : rank*Nat) -- The type requires a shape
  = MkTensor [_]               -- The value is the ravel
type Tensor' = Tensor _
type TArg (rank : Nat) = _

-- Arity 1
-- simply loop over surplus frame
match : (TArg a1 -> r) -> Tensor s1 -> Tensor s2
match f = \(MkTensor r1) =>
  let len1 = r1.count
      chunkLen = len1 // product
  in (f@_1) (chunksOf chunkLen r1)

(@) : (a->b->c) -> Nat

-- Arity 2
match2 : (a->b->c) -> (Tensor s1 -> Tensor s2 -> Tensor s3)
match2 = \(MkTensor r1) (MkTensor r2) =>
  let len1 = r1.count
      len2 = r2.count
  in case s1 ,. s2 of
  [] ,: r ->

(@@) : (a->b->c) -> (Nat, Nat) -> (Tensor s1 -> Tensor s2 -> Tensor s3)

--------------
-- Examples --
--------------
(3, "he") , (4, "ef") : [(Int, String)]
(4, 'a') , ('b', 3)   : (Int, Char) , (Char , Int)

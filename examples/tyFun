type Function
instance Function Stack where
  Cons = (->) : Type -> Type
  Nil  = Void

printf (fmt : String) =
= let go = \case
    "%d" ++ etc = \(d:Int   ) => show d ++ go etc
    "%f" ++ etc = \(d:Float ) => show d ++ go etc
    "%s" ++ etc = \(s:String) => s      ++ go etc
    "%%" ++ etc = '%' , go etc
    c , etc     =  c  , go etc
  in go fmt

printf "f=%d\n"

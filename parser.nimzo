-- Main : IO
-- IO = ##
--   ret    : %i8
--   fileIO : { In , Out }

-- Text = [ N : { Char , Text } | Z : {} ]
-- Pretty a = { ret : a , pretty : a -> Text }
--ParseState a = ##
--  stream : String
--  ret    : a

--Parser a = ParseState b -> ParseState a
--runParser : ParseState a -> ParseState -> Maybe a

--Maybe a =
-- | Nothing : Maybe a
-- | Just    : a -> Maybe a

List a =
 | Z : List a
 | N : a -> (List a -> List a)

String =
 | Null : String
 | Next : Char -> (String -> String)

-- _>>_ = \f x => \a => x (f a)
identity x = x
_>>_ = \f x a => x (f a)
--pure x ps = ps . ret . set x
pure x ps = { ret = x }

--parser primitives
parseOK pstate = pstate . cok . set 1
parseKO pstate = pstate . cok . set 0
_<|>_ = \pa pb pstate => ifE (pa pstate . cok) (pa pstate) (pb pstate)
optional v = v <|> \ps => ps . ret . set Null

-- -- : f a -> f [a]
-- TODO need to fmap ( . ret . over ..)
fmap f ps = pure (f (ps . ret))
some v = v >> \ps => (\p2 => pure (p2 . ret . over (Next (ps . ret))) ) many v ps
many v = pure Null

-- satisfy pred pstate = case pstate . stream of
--   | Next x xs => pstate . set (ifE (pred x) { cok = 0 , stream = xs , ret = x } { cok = 0 })
--   | Null      => parseKO pstate

-- eof pstate = case pstate . stream of
--   | Null      => parseOK pstate
--   | Next x xs => parseKO pstate

-- --x y = eq y 3
-- xd c = satisfy (\x => eq x c)
-- char c = satisfy (eq 'B')
-- 
-- -- --makeGlobP : String -> Parser [String]
-- makeGlobP gs = let
-- --globAny xs = let next = makeGlobP xs in next <|> many (notFollowedBy next > takeP 1)
-- --globAny xs = many (satisfy (eq 'B')) <|> makeGlobP xs
--   globAny = many (satisfy (eq 'B'))
--   in case gs of
--    | Null      => eof
--    | Next x xs => ifE (eq x '*') (globAny xs) (satisfy (eq x) >> makeGlobP xs)
--  --[]       -> eof
--  --'*' , xs -> globAny xs
--     -- also [...] ? + !

--runParser parseFn str = parseFn { stream = str , cok = 1 , ret = () }
--test = runParser (makeGlobP "*c")

-- Stream: tokensToChunk, chunk2Tokens, chunkLength, take1_, takeN, takeWhile_
-- Parsec: parseError, label, try, lookAhead, notFollowedBy, withRecovery, observing, eof, token, tokens, takeWhileP, takeWhile1P, takeP, getParserState, updateParserState

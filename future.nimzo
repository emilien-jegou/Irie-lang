-- concepts likely to be implemented

Flat A = ||
  Replicate A Int
  Iterate  (A -> A) A
  Generate (Int -> A)

  Array A  -- machine array
  Slice Int Int (Flat A)
  Appends  (Flat A)
  Prepends (Flat A)
  Overlay (Int -> Int) (Flat A)
  Zip @(Flat A)

  Foldr (A -> B -> B) B (Flat A)
  Foldl (B -> A -> B) B (Flat A)

  Prefixes (Flat A) -- also suffixes
  Chunks  Int
  Infixes Int -- overlapping chunks

  Product -- Either (list of offsets) (Statically known)
--Unrolled @[Vector]

spawn : Flat A -> || Flat.Array ||
unlink : (A -> _) -> _

-- Flat
nub
nubsieve
sort
reverse
rotate
shift
append
zip
insert
prefix
infix
rank

-- ADT
Rect  : && x : Int & y : Int &&
Shape : || x : Int | y : Int ||

Rectangle =
 & x : Int
 & y : Int

Shape =
 | c : Circle
 | r : Rectangle

Gadt =
 # x : xd
--main = PrintList (Inc (Cons 12 (Cons 43 Nil)))

-- mk generator (fn and state)
-- 0. st = gen ; ST
-- 1. call gen
-- 2. step: calc to depth 1 then call next fn
-- 3. maybe fn wants more stream => 
-- 4. end of st: call gen once more (maybe unwind stack)

-- [12,43] ; [@Inc,PrintList] => [13,43] ; [Inc,@PrintList] => [43] ; [@Inc,PrintList] ..

-- Right | Left fold

-- * ST { { STAlts } ; { STAlts } ; [ { STAlts ; l1 } , { STAlts ; l2 } ] }
-- * Stream = { Generator ; ST ; Label }

-- Push | Pull ?!
-- Pull => how to unwind stack ? doesn't play well with stack machine
-- Push n? => | callback to request more .. push to buffer
-- * strict to depth n

-- 1. push to depth n                   | noop
-- 2. depth n intermediaries            | when to stop ?
-- 3.a. fold depth n                    | has to be left-assoc
-- 3.b. request more                    | more stack for callback
-- 4. push more                         | restart chain

-- strict n
-- | unwind stack | lazy thunk (morestack)
-- Tree ?
-- Generator ?
-- Either label | generator

-- ST     = STEnd | STStrict | STCont [Fns] | STAlts [Fns] | STZip [Stream]
-- Stream = { st : [ST] , ix : Int , lNext : label }
-- Start: call st[-1] { st ; count-1 ; count ; lNext } l0
-- * stend    => terminate
-- * stStrict => recurse over label, cont st
-- * normal   => do 1 label, cont st
-- * pull     => modify the stream inplace

-- concepts likely to be implemented

Flat A = ||
  Replicate A Int
  Iterate  (A -> A) A
  Generate (Int -> A)

  Array A  -- machine array
  Slice Int Int (Flat A)
  Appends  (Flat A)
  Prepends (Flat A)
  Overlay (Int -> Int) (Flat A)
  Zip @(Flat A)

  Foldr (A -> B -> B) B (Flat A)
  Foldl (B -> A -> B) B (Flat A)

  Prefixes (Flat A) -- also suffixes
  Chunks  Int
  Infixes Int -- overlapping chunks

  Product -- Either (list of offsets) (Statically known)
--Unrolled @[Vector]

spawn : Flat A -> || Flat.Array ||
splitFront :: { n : Int } : Flat A -> n @ A
splitBack  :: { n : Int } : Flat A ->

-- Flat
nub
nubsieve
sort
reverse
rotate
shift
append
zip
insert
prefix
infix
rank

-- ADT
Rect  : && x : Int & y : Int &&
Shape : || x : Int | y : Int ||

Rectangle =
 & x : Int
 & y : Int

Shape =
 | c : Circle
 | r : Rectangle

Gadt =
 # x : xd

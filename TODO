# Compiler coding style
  * Use semialign; in particular careful with zipwith / zip since lists can be diff lengths
## Top
  * language server
  * precompiled modules ('binary' haskell package)
  * Linker; invoke clang
  * Don't repeat not-in-scope errors
  * Error messages: show exprs with the problematic types (add 3 2 1) cryptically says: %i32 /<: (%i32 -> t7)
## Parse
  * Use [n..] numbered args from Parser in a safer way
## Types
  * generalise anon bindings using levels
  * add bitwidth to NumInstr
  * check let | rec
  * handle field name collisions (THFieldCollision)
  * fn Apps are Poison iff the function ret type depends on the poison arg
  * Warn when something has a nonsense type join
  * Dependent normalisation & Staging
## Codegen
  * opportunistic instrs that read Terms also need a dumber version for Operands
  * do asmIdx resolution here
  * promote single field records to field value (worthwhile if avoids pointer indirection)
  * figure out how ffi handles passing [n x %i1] by value

!!
repl & linking & typecase in JIT to print results

## Top Priority
  * languageDocumentation.md
  * User declared types and non-trivial type annotations
  * normalize fields/labels for codegen
  * (a , b) = (1 , 3) top level functionless patterns
  * generalisation: Don't write to typevars! count and mark THVars, then replace with THBound
  * make new datatype for hashmap + vector 'StrIntName'
  * reconcile first order foldl and foldr (somehow indicate for fromString and toString)
## Top
  * qualified imports / names / treat modules as records (local imports/mixfixes)
  * show + repl typecase to print JIT results
  * provide Vector alternative for Cons | THProduct when names sequential (frequent) [n..m]
## Parse
  * recognize let|rec and norecurse
  * don't allow mixing tabs and spaces
  * safer use of [n..] numbered args
  * Pattern guards
  * List comprehensions
  * sh syntax `ls -lr` => `ls { l=True , r=True }`
  * make more robust patterns2TT & patBind (top level patterns) maybe exploit functor modules?
  * warn conflicting definitions (from pattern args , let bindings etc..)
## Types
  * handle field name collisions (THFieldCollision)
  * Warn nonsense type joins
  * lone mfWords that aren't ambig-binds should error (also things like f = 3 <)
  * Dependent normalisation & Staging
  * typevars with bounds (a->b) & (c->d) need to be flattened and merged for co-occurence analysis (a&c -> b&d)
  * simplify type; imports.basic.twice f x = f (f x)
  * Careful mergeing mu types; µx. may contain other µx.!
  * need to generalise (place the forall.) in polymorphic subexpressions correctly
## Simplifier
  * constructor specialisation
  * case-of-case
  * static argument transformation
## Codegen
  * promote single field records to field value (esp. if avoids pointer indirection)

## Unimportant
  * Don't repeat not-in-scope errors (replace NotInScope with PoisonExpr on first fail?)
  * make work module import loops
  * language server
  * optimize cached modules

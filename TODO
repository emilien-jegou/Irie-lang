# sponsor
# New
  * set of record labels
  * sum-of-product construction ?!
  * add inplaceable vector for lambda-bound typevars =~ scheme automaton ?

# expr2Core
  * imports
  * array prims + patterns + nested patterns
  * register data subtypes (for recursive refs)
  * GADT's (apparently tricky because of equality constraints eg. Sum a a => a == a)
  * (generate primitive fn wrappers somewhere)

# Typeclass
  * default typeclass signatures/decls
  * check instances <= class

# parser
  * lambda case
  * move all type parse logic to the term parser
  * linefolds
  * source locations

# Prelude
  * fold-build ~ lazy
  * effects
  * distributed computing

# Low priority
  * error reporting
  * precompiled modules (sv them where?)
  * a , b : t -- syntax

# Maybe
  * rec
  * disallow inline polytypes; (force use of typevars / flow edges)
  * parse GADT style
  * View patterns
  * GuardedRhs
  * ContPrim may be unecessary
  * optimize convFixities
  * use Vector.Bundle in toCore ? (have to register names early though)

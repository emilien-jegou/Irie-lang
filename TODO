# expr2Core
  * freevars
  * array prims + pattern matching

  * generate function wrappers for remaining primitives (stgtollvm:258)
  * precedence (parser doesn't have all infix decls)
  * patterns, nested patterns, matches2Case
  * implicit forall typevars ?
  * register subtypes before codegen in case recursive
  * TyRigid could be polytype
  * review case -> core logic

# Typeclass
  * Instantiation (classOverloads + defaults) (in typejudge ?)
  * default typeclass signatures/decls
  * fn overloads
  * use a fromString function for literals
  * multiparam typeclasses

# core2Stg
  * tyFunctions
  * polymorphic fns (boxed vs unboxed)

# parser
  * move all type parse logic to pExp
  * oneline let parser
  * Multiple Infixes
  * custom infix decls
  * indented 'where', esp. class
  * linefolds
  * GADT style
  * rec (let-rec)
  * source locations

# General
  * error message clarity
  * precomipled modules (also emit externs for all functions)

# Prelude
  * fold-build
  * fusion across functions ? composition fusion
  * effects
  * distribution
  * memory (eg. inplace modifications undo as stack unravels eg. sudoku)

# Maybe
  * View patterns
  * GuardedRhs
  * Case -> Case optimizations
  * polymorphic PAp - how are freeVars bound ?
  * ContPrim may be unecessary

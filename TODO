## Top Priority
  * languageDocumentation.md
  * type annotations (polymorphic subsumption and aliases)
  * choice between (first order) foldl and foldr; ListFn => FoldL fl | FoldR fr | Array fl fr (| Ix)
  * toCStruct / fromCStruct / [ptr] : A -> CStruct
  * check escaped | leaked | dead vars are updated at right time through let-nests & mutuals
## Top
  * show + repl typecase to print JIT results
  * provide Vector alternative for ADTs when names sequential (they frequently are) [n..m]
  * 'StrIntName' new datatype: growable vector + hashmap
  * tycon let-bindings addresses (f = let l = .. in .. => `f.l`)
  * Linear types; dependent types required to quantify relative linearity `t ≥ f => t → u`
## Parse
  * don't allow mixing tabs and spaces
  * Pattern guards
  * List comprehensions
  * rewrite patterns2TT & top level patterns; maybe exploit functor modules?
## Types
  * handle field name collisions (THFieldCollision)
  * Dependent normalisation & Staging (compile recursive defs when normalising)
  * first class polymorphism
  * mergetyhead should indicate if merge was a noop (so bisub knows it has already seen that input)
## Functor modules and records
  * imports allowed anywhere and treated as record
  * BName LName FName overlap & mixfix
  * Module = Fun | Record
  * Module = Vector Bind & [HNames] & [MixfixNames] (vs IntMap Expr)
  * Records = sparse array of file-scoped names
  * Open v qualified (BindNames v fieldNames)
  * pattern assignments `(a , b) = (1 , 3)`
  * scoping of labelNames
  * use functions & records to manage names? (names , let-binds , etc..)
## Error messages
  * Warn nonsense type joins
  * lone mfWords that aren't ambig-binds should error (also non-explicit partial apps like f = 3 <)
  * conflicting definitions (from pattern args , let bindings etc..)
  * mixfix parser errors & locations
## Simplifier
  * constructor specialisation
  * case-of-case
  * static argument transformation
  * tycon promotion (promote single field /labels to value)
  * recognize neutral elements (eg. 0 for addition , 1 for multiplication)
  * normalize fields/labels for codegen

## Unimportant
  * error messages via prettyprinter Doc
  * mergeTypes indicates whether merge was noop
  * optimise instantiation
  * check let-rec / mutuals
  * Repeat not-in-scope errors (replace NotInScope with PoisonExpr on first fail?)
  * make work module import loops
  * language server
  * optimize cached modules
  * sh syntax `ls -lr` => `ls { l=True , r=True }`
  * engineer GlobalResolver to work concurrently
  * when recompiling cached modules; remove deleted names
  * prefetch memory | loop unrolling
  * after function with no free-vars generalised, can trim but not fully clear bisubs!

# expr2Core
  * precompiled modules, freeVars
  * instance Apps need to be binds (lift them ? but pap's cannot be lifted in advance)
  * array prims + patterns
  * generate function wrappers for remaining primitives (stgtollvm:258)
  * nested patterns
  * ocaml 'a | implicit forall typevars ?
  * register subtypes (to handle recursive refs)
  * error reporting
  * don't allow unknown typenames

# Typeclass
  * default typeclass signatures/decls
  * use a fromString function for literals
  * check instances <= class
  * subsume : rigid -> _ -> True -- check it's ok somewhere

# core2Stg
  * tyFunctions
  * polymorphic fns (boxed vs unboxed)

# parser
  * funBind eats all matches ignoring name
  * move all type parse logic to pExp
  * linefolds
  * rec (let-rec)
  * source locations

# Clean
  * toCore::typeclass
  * tyJudge::instantiate
  * match->case->core

# Prelude
  * fold-build ~ lazy
  * effects
  * distribution
  * memory (eg. inplace modifications undo as stack unravels eg. sudoku)

# Maybe
  * STG duplicates fns / globals if referenced multiple times
  * GADT style
  * View patterns
  * GuardedRhs
  * Case -> Case optimizations
  * ContPrim may be unecessary
  * optimize convFixities

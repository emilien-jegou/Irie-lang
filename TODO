## Top
  * repl typecase to print JIT results
  * language server
  * fix precompiled name resolution; write global resolver to file?
  * Linker; invoke clang
  * module import loops
  * Don't repeat not-in-scope errors
## Parse
  * Use [n..] numbered args from Parser in a safer way
## Types
  * propagate poisonexpr from matchAlts
  * generalise anon bindings using levels (or float args up to top binding to read their type after gen)
  * check let|rec + mark Binds as let|rec
  * handle field name collisions (THFieldCollision)
  * Warn nonsense type join
  * lone mfWords that aren't ambig-binds should error (also things like f = 3 <)
  * Dependent normalisation & Staging
  * typevars with bounds (a->b) & (c->d) need to be flattened and merged for co-occurence analysis (a&c -> b&d)
  * simplify type; imports.basic.twice f x = f (f x)
  * Careful mergeing mu types; µx. may contain other µx.!
## Simplifier
  * constructor specialisation
  * case-of-case
  * static argument transformation
## Codegen
  * do asmIdx resolution here
  * promote single field records to field value (esp. if avoids pointer indirection)
  * use bitops on %i8s, llvm tends to promote %i1 to %i8

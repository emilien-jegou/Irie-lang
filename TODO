# expr2Core
  * array prims + pattern matching
  * precompiled modules, rec, freeVars
  * generate function wrappers for remaining primitives (stgtollvm:258)
  * infix associativity
  * patterns, nested patterns, matches2Case
  * ocaml 'a | implicit forall typevars ?
  * register subtypes before codegen (support for recursive)
  * review case -> core logic
  * error data

# Typeclass
  * avoid nameclashes for instances
  * default typeclass signatures/decls
  * use a fromString function for literals
  * multiparam typeclasses

# core2Stg
  * tyFunctions
  * polymorphic fns (boxed vs unboxed)

# parser
  * move all type parse logic to pExp
  * indented 'where', esp. class
  * linefolds
  * GADT style
  * rec (let-rec)
  * source locations

# Clean
  * toCore::typeclass
  * tyJudge::instantiate

# Prelude
  * fold-build
  * fusion across functions ? composition fusion ~ lazy
  * effects
  * distribution
  * memory (eg. inplace modifications undo as stack unravels eg. sudoku)

# Maybe
  * TyRigid could be polytype
  * View patterns
  * GuardedRhs
  * Case -> Case optimizations
  * polymorphic PAp - how are freeVars bound ?
  * ContPrim may be unecessary
  * optimize convFixities

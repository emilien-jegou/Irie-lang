--externVarArg printf : CharPtr -> Int
--import imports/lambda
--import imports/basic
--import imports/mixfix
--import imports/records
--import imports/impredicative
--import imports/array
--import imports/church
--import imports/fin
--import imports/dependents
--import imports/printf
--import imports/subtype

BigInt =
  | One : Int -> BigInt
  | Two : Int -> (Int -> BigInt)

--BigAdd a b = case a of
--  | One va => case b of
--    | One vb => (One (plus va vb)) -- ifThenE 0  (Two (zext o) val)

Id x = case x of | One vx => One (putNumber (plus 99 vx))
PrintInt a = case a of | One va => putNumber va

--main = PrintInt (One 32)
main = PrintInt (Id (One 32))

--List =
--  | Nil : List
--  | Cons : Int -> (List -> List)
--
--PrintList l = case l of
--  | Nil => 0
--  | Cons i l' => plus (putNumber i) (PrintList l')
--
--inc l = case l of
--  | Nil => Nil
--  | Cons i l' => Cons (plus 1 i) (inc l')
--
--main = PrintList (inc (Cons 0 (Cons 1 Nil)))

-- PrintList : retVal -> label -> retVal

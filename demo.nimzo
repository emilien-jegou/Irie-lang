--externVarArg printf : CharPtr -> Int
--import imports/lambda
--import imports/basic
--import imports/mixfix
--import imports/records
--import imports/impredicative
--import imports/array
--import imports/church
--import imports/fin
--import imports/dependents
--import imports/printf
--import imports/subtype

BigInt =
  | One : Int -> BigInt
  | Two : Int -> (Int -> BigInt)

-- label -> label
-- (label -> st -> val)
--BigAdd a b = case a of
--  | One va => case b of
--    | One vb => (One (plus va vb)) -- ifThenE 0  (Two (zext o) val)

--Id x = case x of
--  | One vx => One vx

-- (label -> int)
PrintInt a = case a of
  | One va => putNumber va

--main = PrintInt (Id (One 32))
main = PrintInt (One 32)

--main = printInt (BigAdd (One 55) (One 24))
-- printInt (BidAdd (One 55 , One 24))
-- 1. mkLabel (One 55 , One 24)
-- 2. mkST => |cont [BigAdd , printInt]
-- 3. evalST => bigAdd { |cont [printInt] ; label }
-- 4. bigAdd => mkST (|STAlts)
-- 5. evalST => printInt { |none ; label }

--main = printInt (One 55) -- => One

-- mklabels
-- bigAdd (st.pap printInt)

--id : (A : _) -> A -> A
--id _ a = a

Church : Set -> Set
Church A = (A -> A) -> (A -> A)

c0 : Church Int = \s z => z
c1 : Church Int = \s z => s z
c2 : Church Int = \s z => s (s z)

Nat  = Church Int
Nat₁ = Church Int
X = Church Int -> Church Int -> Church Int 
add : X
add a b s z = b s (a s z)

mul : X
mul a b s z = b (a s) z

exp : Church Int -> Church (Int -> Int) -> Church Int
exp a b = b a 

tetr : Nat -> Nat₁ -> Nat
tetr k n = n (exp k) c1

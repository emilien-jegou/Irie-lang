--List =
--  | Nil : List
--  | Cons : Int -> (List -> List)
--
L a =
  | Nil : L
  | Cons : Arrow a (Arrow L L)

--pure x v = { ret = x }
----pOK ps = ps . cok . set 1

_>>_ = \f x a => x (f a)
_<_  = \f x => f x

z = add < 5

self x = x x
--r a = r (add a 1)
--g x = g
ifE2 = ifThenElse
join a b = ifThenElse 1 a b
--s = join g g

printList l = case l of
  | Nil => 0
  | Cons i ll => add (putNumber i) (printList ll)

Inc l = case l of
  | Nil => Nil
  | Cons i ll => Cons (add 1 i) (Inc ll)

scanSum n l = ifThenElse (le n 0) l (scanSum (sub n 1) (Cons n l))

-- go sep l = case l of
--   | Nil => Nil
--   | Cons x xs => Cons sep (Cons x xs)
-- 
-- intersperse sep l = case l of
--   | Nil => Nil
--   | Cons x xs => Cons x (go sep xs)

--level a = let px x = plus a x in plus 3

--bad = (scanSum 5 Nil) >> printList
--identity x = x

--one = Cons 12 Nil
--two = Inc one
--main = printList one

--two = Cons 12 ( Cons 98 Nil)
--main = printList (Inc (scanSum 3 Nil))

--nub a str = unlink str (nub a str) (\c str => ifThenE (eq c a) str (link c str))
--main = nub 32 "h i wor ld"

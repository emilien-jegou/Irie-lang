-- generalized case deconstruction
caseMatch : e -> (e->r) -> r
 = \scrut callback => _ -- call the callback if this match fails

-- Stack
data Stack eType
 = Cons eType Stack
 | Nil

-- potentially infinite
class List eType <: Foldable t where
  -- Array class supersumes tuples,records and basic arrays
  (!)       : Array len eType -> Nat {(<len)} -> eType

  buildG    : ((a->b->b)->b->b) -> ArrayInf a -- eg. buildG g = g (:) []
  buildI    : (Nat->eType) -> Array count eType
  buildIFix : (Nat->(this=Array count eType)->eType) -> this
--(!=)      : Array len eType -> Nat {(<len)} -> eType -> Array len eType

-- Array: physically exists in memory: anything indexable with a fixed length,
type (*) = Array -- infix version
class (Array Nat eType) <: List where
  count : Array len eType -> Nat = len

(++) : Array al  eType -> Array bl eType -> Array (al + bl) eType
(!!) : Array len e -> Int -> e
  = \arr idx => arr ! (if idx<0 then len+idx else idx)

---------------
-- Instances --
---------------
-- LLVM Array --
instance (Array c e) (#! Array c e) where
  (!)  arr idx = #! extractVal arr idx
-- Tuple --
instance (Array c e) (forall eTy<=e tyList=[eTy] :: #!Tuple count tyList) where
  (!) : Tuple len tyList -> (n : Nat {(<len)}) ->  tyList!n
  (!) arr idx = #! extractVal arr idx

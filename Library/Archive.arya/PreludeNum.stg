module Num.stg

-- vanilla llvm types (LLVM is a builtin constructor)
-- deriving (Read, Show, Eq, Ord, Enum, Bounded)
newtype Bool  = LLVM "%i1"
newtype Char  = LLVM "%i8"
newtype Int   = LLVM "%i32"
newtype Float = LLVM "%float"

newtype Nat a = a>0 => Int a -- Natural numbers 0..Inf

default Num Integer
default Real Double

-- Totally ordered datatypes
data Ordering = LT | EQ | GT     deriving (Eq, Ord, Bounded)
class (Eq a) => Ord a where
  compare              : a -> a -> Ordering
  (<), (<=), (>=), (>) : a -> a -> Bool
  max, min             : a -> a -> a

--sequentially ordered types
class Enum a where
  succ, pred : a -> a
  toEnum   : Int -> a  -- toEnum and fromEnum translate arithmetic sequences
  fromEnum : a -> Int

class (Eq a, Show a) => Num a where
  (+), (-), (*) :: a -> a -> a
  fromInteger : Integer -> a

class (Num a, Ord a) => Real a where
  toRational : a -> Rational

class (Real a, Enum a) => Integral a where
  quot, rem, div, mod : a -> a -> a
  quotRem, divMod : a -> a -> (a;a)
  toInteger : a -> Integer

class (Num a) => Fractional a where
  (/) : a -> a -> a
  recip : a -> a
  fromRational : Rational -> a

class (Fractional a) => Floating a where
  pi :: a
  exp, log, sqrt :: a -> a
  sin, cos, tan, asin, acos, atan :: a -> a
  sinh, cosh, tanh, asinh, acosh, atanh :: a -> a

----class RealFrac a where
----class RealFloat a where
--gcd, lcm :: (Integral a) => a -> a -> a
--(^) :: (Num a, Integral b) => a -> b -> a
--(^^) :: (Fractional a, Integral b) => a -> b -> a
--
--fromIntegral (Integral a, Num b) => a -> b
--realToFrac :: (Real a, Fractional b) => a -> b

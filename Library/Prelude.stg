-- module Prelude where

--------------------------------
-- Magic compiler Definitions --
--------------------------------
kind MonoType
kind PolyType
-- A Polytype is a type of type - not the type of a term

kind Function = forall t. Stack t -- you can do kind matching on this stack of types
(&) : t1 -> t2 -> t3
(|) : t1 -> t2 -> t3

-- Subsumption: Indicate a type can subsume another (during constraint solving)
-- ie. a <= b means a is less polymorphic than b
(<=) : MonoType -> PolyType -> PolyType

(&) : a -> b -> a & b       -- anonymous data (tuple) (, is list concatenation)
(@) : Functor e -> Nat -> e -- derived by compiler for all data

-- magic types
type Nat*e -- http://llvm.org/docs/LangRef.html#array-type
type Stack e -- = linked list (can this be used for arrays `Nat*e` with size log(i) ?)

-- intended for low level llvm types / externs
ptr : a -> Ptr a
nullptr : Ptr a

inf : Num
---------------------
-- basic functions --
---------------------
f (>>) g : (b->c) -> (a->c) -> a -> c = \x -> g (f x)
f (<<) g : (a->c) -> (b->c) -> a -> c = \x -> f (g x)
id       : a -> a                     = \x -> x
f ($) x  : (a->b) -> a -> b           = f x
until : (a->Bool) -> (a->a) -> a -> a
  = \p f x -> if px then x else until p f (f x)
flip f a = (a `f`)

-----------------
-- basic types --
-----------------
type String = [Char] -- see below for super important polytype []
type () = ()
type /String/ = Regex -- postcircumfix operator `//` (like [], < >)
  where
  (=~) : Regex -> String -> Bool
  (s)  : Regex -> String -> String
data Maybe a    = Nothing | Just a
data Either a b = Left a  | Right b

-----------------
-- Array types --
-----------------
-- prelude lists: Nat*e , Stack e , ListStack , Indexed e , Generator e , Counted : Nat&[e]
class [e] <= Traversable & Foldable
  where {} -- only pattern matching is defined (and not all patterns are valid for all lists)

-- some compiler magic, it's an llvm array
type Nat*e <= [e]
  where
  (.)  : Nat*e -> Nat -> e
  -- update: it will be O(1) if the list is ditched after, otherwise
  -- the list will have to be copied (or masked perhaps)
  -- Anyway the main use for single updates is in State monads, and we get O(1) there
  (.=) : Nat*e -> Nat -> e -> Nat*e
  (,)  : n1*e -> n2*e -> (n1+n2) * e

-- Prelude lists
-- = Nat*e          -- llvm array
-- | Stack e        -- linked list
-- | Indexed e      -- meta list with indexing function
-- | Generator e    -- defined in terms of previous elements (can be Inf)
-- | Counted ( (count:Nat) & (values:[e]) )
data Stack e where
  (,) : Stack e -> e -> Stack e

data ListStack e = forall n. Stack (n*e) where

-- Lists with index function
data Indexed e (f : Function) where
  (.) : (Indexed e f) -> Nat -> e = \(Indexed e f) i -> f i

data Generator e = ListStack where
  (.) : Generator e -> Nat -> e -- this calculates >=0 elements and memoizes

-- Counted = trivial list wrapper with extra count property
data Counted e = ( (count:Nat) & (values:[e]) ) deriving [e] via values

-- see class Functor for a shortcircuiting version
any : (a->Bool) -> t a -> Bool <= Foldable t
all f = any (not << f)

-----------------------
-- Basic typeclasses --
-----------------------
class Semigroup a where
  (<>) : a -> a -> a
class Monoid a <= Semigroup a where
  mempty : a
  mconcat : [a] -> a = foldr (<>) mempty
class Alternative f <= Applicative f where
  empty : f a
  (<|>) : f a -> f a -> f a
  some : f a -> f [a]
  many : f a -> f [a]

-- Functor laws: fmap id == id && fmap (f<<g) == fmap f<<fmap g
-- Note. Mapped:
-- idea is to not immediately apply fmap ('Mapped' is erased at compile time)
-- eg. (all << fmap) or (find x << fmap) don't need the whole mapping
class Functor f where
  fmap = (<$>) :: (a->b) -> f a -> f b
  (<$) : a -> f b -> f a
  any << fmap f l ==> elem (p << f) l -- note elem is often = any<<(==)

  type Mapped = a->b & f a
  cast : Mapped -> f b = \(fn & f) -> fn <$> f

class Applicative f <= Functor f where
  (<*>) : f (a->b) -> f a -> f b
  (*>)  : f a -> f b -> f b
  liftA2 : (a->b->c) -> f a -> f b -> f c
  Pure : b -> a b

-- Note return, (>>), liftM, liftA, ap are all scrapped
-- in favor of the equivalent applicative versions.
class Monad m <= Applicative m where
  (>>=) : m a -> (a->m b) -> m b
  join  : m (m a) -> m a

class MonadFail m <= Monad m where
  fail : m a -- pattern match failure in do notation

-- Prelude List
map : (a->b) -> n[a] -> n[b]
(,) : n[a] -> m[a] -> (n+m)[a]
filter : (a->Bool) -> n[a] -> m[a] <= (n<=m)
concat : t [a] -> [a] <= Foldable t
concatMap : (a->[b]) -> t a -> [b] <= Foldable t
head : n[a] -> a <= n>0
last : n[a] -> a <= n>0
tail : n[a] -> (n-1)[a] <= n>0
init : n[a] -> (n-1)[a] <= n>0
null : n[a] -> Bool
length : n[a] -> Nat
calcLength : [a] -> Nat
(.) : [a] -> Nat -> a
foldl : (b->a->b) -> b -> t a -> b <= Foldable t
foldl1 : (a->a->a) -> t a -> a
scanl : (b->a->b) -> b -> n[a] -> n[b]
scanl1 : (a->a->a) -> n[a] -> n[a]
foldr : (a->b->b) -> b -> t a -> b
foldr1 : (a->a->a) -> t a -> a
scanr : (a->b->b) -> b -> n[a] -> n[b]
scanr1 : (a->a->a) -> n[a] -> n[a]
iterate : (a->a) -> a -> Seq a
repeat : a -> Seq a
replicate : (n:Nat) -> a -> n[a]
cycle : [a]->[a]
take : (n:Nat) -> m[a] -> (m-n)[a]
drop : (n:Nat) -> m[a] -> (m-n)[a]
splitAt : (n:Nat) -> t[a] -> n[a] ; (t-n)[a]
takeWhile : (a->Bool) -> n[a] -> m[a] <= m<=n
dropWhile : (a->Bool) -> n[a] -> m[a] <= m<=n
span : (a->Bool) -> t[a] -> n[a];m[a] <= n+m==t
break : (a->Bool) -> t[a] -> n[a];m[a] <= n+m==t
lines : (in:String) -> n[String] <= in.n < n
words : String -> [String]
unlines : [String] -> String
unwords : [String] -> String
reverse : n[a] -> n[a] <= n < Inf
and : t Bool -> Bool <= Foldable t -- and shortcircuitable !
or : t Bool -> Bool <= Foldable t -- and shortcircuitable !
any : (a->Bool) -> t a -> Bool <= Foldable t -- and shortcircuitable !
all f = any (not << f) -- this way it's shortcircuitable
elem : a -> t a -> Bool <= Foldable t & Eq a
notElem = not elem
lookup : a -> [a;b] -> Maybe b
-- zip below

------------------------
-- Standard functions --
------------------------

----move the boxes to surroun- variable arity zipWith
--zipWith : Function f
--       => f -> map (\%argTy -> %[argTy]) f
--zipWith f = go
--  where go a = [f a]
--        go [a] [b] = f a b
--        go [a0 a1] [b0 b1] = f a0 b0 , go a1 b1
--        g _ _ = _
--        go a b c = go (go a b) c
--

--printf : (String _len) -> _ -> String
--printf formatString = conPrintf formatString
--  where conPrintf ('%' , b , r) = doFmt b >> conPrintf r
--        conPrintf (b , l) = (b,) >> doFmt l
--        doFmt = \case
--          'd' -> show : Int -> String
--          's' -> id : String -> String

sequence  : Applicative m => [m a] -> m [a]
sequence_ : Applicative m => [m a] -> m ()
mapM      : Monad m => (a -> m b) -> [a] -> m [b]
mapM_     : Monad m => (a -> m b) -> [a] -> m ()
(=<<) = flip (>>=)

instance Functor IO where
  fmap f x = x >>= (pure << f)
instance Applicative IO where
  pure  = returnIO
  (*>)  = thenIO
  (<*>) = ap
instance Monad IO where
  (>>=) = bindIO
  fail s = failIO s
instance Alternative IO where
  empty = failIO "mzero"

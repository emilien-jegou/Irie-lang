SizeT  = Int
BitMap = Int
Chunk  = RawPtr , Frame
NULL   = 0

-- New insights:
-- Wrapper datas ?
-- linear datas can avoid a dup+free , immediately free 0 use subdata
-- wantFrames field for datagroup (ie. do we bother freeing stuff)
-- multiple trims

-- Open questions:
-- split-trees: finalize dgs+frames, avoid (fragging , recursion)
-- Extraction + Free entire trees (requires dummy deconstructor)
-- containers + wrapper memory

-- Notes:
-- data graph =~ call-graph, usually desync
-- !free data on use; not on return to spawn
-- can return allocator metadata
-- multithreading increases fragmentation

-- ? dedicated DG for random records?
-- ? randholes datagroup with sharecounts?
-- ? compile-known alt sizes useful ?
-- ? if down to 1 flat dependent, rebuild frame's freelist, since only 0..2 (prbly large) frags
-- ? fixed size DG allocations ?

-- Frontend work:
-- * track 1 DataGroup and n argFrames
-- * retFrames: find argFrames used in ret
-- * Flat | Tree data ?

-- special
-- singleton DG: never use frames on this
-- share|ref frames: can avoid overhead
--   if promise never to ref|share this frame
Heap = ##
  large   : DataGroup
  fastbins: [DataGroup] -- small ones
  panicFn : Int -> IO ()

-- DG: designed for complete defrag
-- + Blanket free when datagroup ends
-- + can trim extremities
-- + can pass down spare frames
-- + very fast merges
-- + suitable for massive allocations + mmap
-- + few datagroups expected
-- + small DG's kept in global fastbins
-- - unshareable
-- - temporary fragmentation
DataGroup = ## prev_in_use | mmap | single
  prevSize : Int -- ! not part of this dg
  -- ^^ part of prev chunk (iff not PREV_IN_USE)
  sz     : Int -- > ARENA_SZ are mmaps
  -- vv (usually user data starts here)
  mergePrev : DataGroup -- iff MERGED
  frames : FreeFrame -- iff not singleton

-- Frame: 
-- Designed for merge of reffed argFrames
-- retframes are a spaghetti of argframe frags
-- call merge before constructing retframe
-- Frames are either shareable / take reffs
-- (if neither, then use a datagroup)
-- + retframes may share argframes
-- + fast when no merges no refs
-- - reftake takes entire frame and difficult
-- - slow to recycle
-- ? optimize unshared frames ?
-- ? immediately reuse freed elems in eg. map?
-- ? Flat vs Tree frametype
-- / unshared frame: promise never to merge/ref
Frame = ##
  merge      : Frame -- non-continuous
  frags      : Frag  -- gaps between chunks
-- vv only if shared / reffed vv
  dependents : Int
  refs       : Int , [Frame] -- need these

-- + only micromanaged when free
-- + small set of sizes
-- + no overhead when inuse
-- - can only be recycled by parent frame
-- - shareable only by taking whole frame
-- - not mergeable (until frame end)
Frag = ##
  -- ^^ inUse chunk ^^
  sz   : Int
  le   : Frag
  eq   : Frag
  -- vv free Mem vv

---------------
-- DataGroup --
---------------
dgSingleton : Size -> DG -- won't ask frames
dgSingletonTrim : DG -> Size -> ()

dgNew  : size -> DG
dgNewFromMem : Ptr -> size -> DG
dgTrim : DG -> ()
dgEnd  : DG -> () -- make singleton
dgFree : DG -> ()

------------
-- Frames --
------------
newFrames : DG -> Int
  -> [Size] -> [Frame] --multithread
trimFrame : DG -> Frame -> Size -> ()

merge : DG -> [Frame] -> Frame
-- merge: retframe references some argframes

growFrame : DG -> Frame -> Size
-- try to grow inplace, else link another frame

delFrame : DG -> Frame
-- maybe free frame and some of it's dependents

----------
-- Frag --
----------
delFrag : Frame f -> Ptr -> Size
-- recycle a fragment (only in tree structures)

-- ~ radix tree
-- insert :: Key -> a -> IntMap a -> IntMap a
-- insert !k x t@(Bin p m l r)
--   | nomatch k p m = link k (Tip k x) p t
--   | zero k m      = Bin p m (insert k x l) r
--   | otherwise     = Bin p m l (insert k x r)
-- insert k x t@(Tip ky _)
--   | k==ky         = Tip k x
--   | otherwise     = link k (Tip k x) ky t
-- insert k x Nil = Tip k x

-- Presentation
-- Circle in a square hole
-- Flat memory, data tree + call graph tree need to be flattened
-- data types: Enum | Peano | Flat | IrregularFlat | Tree
-- Containers - optimize for unwrapping

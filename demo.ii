--externVarArg printf : CharPtr -> Int
-- import imports/church
-- import imports/dependents

--import imports/lambda
--import imports/basic
--import imports/mixfix
--import imports/records
--import imports/Impredicative
--import imports/array
--import imports/fin
--import imports/printf
--import imports/subtype
--import imports/list
import imports/prelude

--printList l = case l of
--  | Nil => 0
--  | Cons i ll => add (putNumber i) (printList ll)
--
--array = (Cons 9 Nil)

-- (a -> b -> b) -> b -> t a -> b
--0 -> 1 -> 7
--(0,(2->5)) -> [ {2 , 3} ] -> [ { 5 , 6 } ]
-- map f l = case l of
--   | Cons x xs => Cons (f x) (map f xs)
--  | Nil => Nil

-- addL l = case l of
--   | Cons x xs => add x (addL xs)

foldr f s l = case l of
  | Nil       => s
  | Cons x xs => f x (foldr f s xs)

-- foldl f s l = case l of
--  | Cons x xs => foldr f (f s) xs

--scanSum n l = if le n 0 then l else scanSum (sub n 1) (Cons n l)
--z = scanSum 3 Nil

--f a b = add a b

--lam = add ((\x => add x 3) 6)

-- _>>=_ : Î  A B C -> A & { ret : B } -> (B -> A -> C) -> C
--_>>=_ = \a f => f (a.ret) a

--IO = | In : IO | Out : IO
--
--z = add 3 2 4
--puts io = io.Out

--xdd = ydd
--ydd = xdd
--main = putNumber x

---- _>_ = \a f => f a
-- topPAp = add 1
-- _<_ = \f a => f a
-- five = add 3 < 2
-- _>>_ = \f x a => x (f a)

-- fail-loneMFWord    = <
-- fail-loneMFWordApp = add 4 <

--gmpMaths = gmp-putNumber (gmp-add 5 (gmp-sub 3 -2))
-- raw = putNumber ({ x = 32 } . x)
--rectangle = { x = { y = 314 , g = 3 , x = 7 } , y = { a = 32 , b = 52 } }
--rc r = gmp-putNumber (r . b)
--main = rc ((rectangle . y) . b . over (add 3))

-- fib x = ifThenElse (le x 1) x (add (fib (sub x 1)) (fib (sub x 2)))
-- fib x = ifThenElse (gmp-le x 2) x (gmp-add (fib (gmp-sub x 1)) (fib (gmp-sub x 2)))
-- main = gmp-putNumber (fib 40)

--f = g
--g = f

-- incprim a = add a 3
-- inc a = gmp-add a 1111
-- square = { x = 325 , y = gmp-add 1 9235 }
-- leaf = square . x . over incprim
-- main = putNumber leaf . x
-- x = leaf . y
-- extractCast  = gmp-add 1 (square . x)
-- copy = gmp-putNumber (leaf . y)
-- xInc = ({ x = 325 , y = gmp-add 111 101} . x . over inc)
-- main = gmp-putNumber (({ x = 325 , y = gmp-add 32 3252352} . x . over inc) . y)
-- fCollision = { z = 3 , z = 2 }

--join a b = ifE 1 a b
--five x = ifE x 5 3
--g z = ifE (eq z 10) z z
--f x = plus (g x) x
--iff x y z = ifE (ifE x y z)

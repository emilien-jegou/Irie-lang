--externVarArg printf : CharPtr -> Int
-- import imports/church
-- import imports/dependents

--import imports/lambda
--import imports/basic
--import imports/mixfix
--import imports/records
--import imports/Impredicative
--import imports/array
--import imports/fin
--import imports/printf
--import imports/subtype
--import imports/list
--import imports/prelude

--f a b = add a b

--lam = add ((\x => add x 3) 6)

-- _>>=_ : Î  A B -> { ret : A } & B -> (A -> B -> C) -> C
-- _>>=_ = \a f => f (a.ret) a

-- _>_ = \a f => f a
_<_ = \f a => f a
five = add 3 < 2
-- _>>_ = \f x a => x (f a)

-- gmpMaths main = gmp-putNumber (gmp-add 9 (gmp-sub 3 -2))
-- main = putNumber (rectangle 3 . y . b)
-- rectangle a = { x = { y = 314 , g = 3 , x = 7 } , y = { a = 2 , b = 52 } }
-- rc r = gmp-putNumber (r . b)
-- main = rc (((rectangle 0) . y) . b . over inc)

-- incprim a = add a 3
-- inc a = gmp-add a 1111
-- square = { x = 325 , y = gmp-add 1 9235 }
-- leaf = square . x . over incprim
-- main = putNumber leaf . x
-- x = leaf . y
-- extractCast  = gmp-add 1 (square . x)
-- copy = gmp-putNumber (leaf . y)
-- xInc = ({ x = 325 , y = gmp-add 111 101} . x . over inc)
-- main = gmp-putNumber (({ x = 325 , y = gmp-add 32 3252352} . x . over inc) . y)
-- fCollision = { z = 3 , z = 2 }

--join a b = ifE 1 a b
--five x = ifE x 5 3
--g z = ifE (eq z 10) z z
--f x = plus (g x) x
--iff x y z = ifE (ifE x y z)

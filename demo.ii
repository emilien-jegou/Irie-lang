--import imports/prelude
--import imports/list
--import imports/simpleTests

-- Need to generalise let-expressions after they are done!
-- lp17 f = let
--   r x g = { a = g x , b = f x }
--   in {u = r 0 (add 1) , v = r {t = 1} (\y => y.t)}

bool6 x y   = ifThenElse x y x  -- ∏ A → (%i1 & A) → A → A

--lp8 = \k => let test = (\id => {tmp = k id , res = id}.res) (\x => x) in {u = test 78 , v = test 1} -- ∏ A → ((A → (%i1 & %i32 & A)) → ⊤) → {u : (%i32 & A) , v : (%i1 & A)}

-- step dirp = case j (readdir dirp) of
--   Nothing => Nothing
--   Just a  => Just { val = a , seed = dirp }
-- j = Just

-- ls dName = unfoldr step (opendir dName)
-- 
-- File = { basename = identity } --takeWhileEnd (/= '/') }
-- Dir  = { pwd = getcwd , entries = ls }
-- 
-- -- tree : String -> IO ()
-- tree rootPath = puts rootPath -- *> subTree "|-- " rootPath
-- 
-- pp pre ent =  (append pre (File.basename (direntName ent)))
-- subTree prefix path = map (pp prefix) (Dir.entries path)
--printList l = case l of
--  Nil => 0
--  Cons i ll => add (putNumber i) (printList ll)

-- fromMaybe l = case l of 
--   Maybe b => b
--   Nothing => 0
-- 
-- x a = ifThenElse a a 3 -- a & Bool -> a & Int
-- 
-- foldl f s l = case l of
--   Cons x xs => foldl f (f s x) xs
--   Nil => s
-- 
-- foldr f s l = case l of
--   Cons x xs => f x (foldr f s xs)
--   Nil       => s

--append front back = foldr Cons back front
--concat = foldr append Nil

-- The prefix in pretty-printing:
-- when a dir is opened:
-- 1. replace preceeding "--" with spaces
-- 2. append if last dir then "`-- " else "|-- " to prefix, 
-- when a dir is closed, remove the "|-- "
----subTree : (String where size >= 4) -> String -> IO ()
--subTree prefix path = let
--  ents = filter (\e => e.0 =? '.') (Dir.entries path)
--  newPrefix  = dropTail 3 prefix ++ "   "
--  lastPrefix = dropTail 4 prefix ++ "`-- "
--  pp prefix ent = puts (prefix ++ File.basename ent) *> subTree (prefix ++ "|-- ") ent
--  in map (\e => pp newPrefix e) entries *> pp lastPrefix last
